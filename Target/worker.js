import{promises as n}from"node:fs";import{inspect as l}from"util";import*as p from"prettier";import{combineLatest as M,of as d,Subject as m}from"rxjs";import{last as u,mergeMap as c}from"rxjs/operators";import{MessageType as i,WorkerMode as f}from"./protocol.js";function I(r,s){const e={files:s.files.length,formatted:[],failed:[],id:s.id,type:i.Formatted};return d(...s.files).pipe(c(async t=>{const o=await n.readFile(t.path,"utf-8");let a;try{a=await p.format(o,{...await p.resolveConfig(t.path),filepath:t.path})}catch(g){return process.stderr.write(`\r
${l(g)}\r
`),e.failed.push(t),e}return a===o||(r.mode===f.Write?await n.writeFile(t.path,a):r.mode===f.Print&&process.stdout.write(a),e.formatted.push(t)),e}),u())}function W(){const r=new m,s=new m;process.on("message",e=>{switch(e.type){case i.WorkerInitialization:r.next(e);break;case i.WorkerFiles:s.next(e);break}}),M([r,s]).pipe(c(([e,t])=>I(e,t))).subscribe(e=>process.send?.(e),e=>{throw e})}export{W as startWorker};
