import{promises as s}from"node:fs";import{relative as m}from"node:path";import a from"glob-stream";import n from"ignore";import{Observable as p}from"rxjs";import{bufferCount as f,mergeMap as c}from"rxjs/operators";import{ProgressReporter as d}from"./progress-reporter.js";import{WorkerPool as g}from"./worker-pool.js";const u=50;function l(r,o){return new p(t=>{const e=a(r,{dot:!0});e.addListener("data",i=>{o.ignores(m(i.cwd,i.path))||t.next(i.path)}),e.addListener("error",i=>t.error(i)),e.addListener("end",()=>t.complete()),e.resume()})}async function w(r){try{return n().add(await s.readFile(r,"utf-8"))}catch{return n()}}async function P(r){const o=new g(r),t=new d(r.quiet,r.check);l(r.files,await w(r.ignorePath)).pipe(f(u),c(e=>o.format(e),o.maxSize*2)).subscribe(e=>t.update(e),e=>{throw e},()=>{t.complete(),t.reformatted&&r.check||t.failed?process.exit(1):process.exit(0)})}export{P as spawnWorkers};
